# Autogenerated config.py
# Documentation:
#   qute://help/configuring.html
#   qute://help/settings.html

# Uncomment this to still load settings configured via autoconfig.yml
# config.load_autoconfig()

# Aliases for commands. The keys of the given dictionary are the
# aliases, while the values are the commands they map to.
# Type: Dict
c.aliases = {'q': 'quit', 'w': 'session-save', 'wq': 'quit --save'}

# Additional arguments to pass to Qt, without leading `--`. With
# QtWebEngine, some Chromium arguments (see
# https://peter.sh/experiments/chromium-command-line-switches/ for a
# list) will work.
# Type: List of String
c.qt.args = ['playbackRequiresUserGesture : True']

# Always restore open sites when qutebrowser is reopened.
# Type: Bool
c.auto_save.session = True

# Enable JavaScript.
# Type: Bool
config.set('content.javascript.enabled', True, 'file://*')

# Enable JavaScript.
# Type: Bool
config.set('content.javascript.enabled', True, 'chrome://*/*')

# Enable JavaScript.
# Type: Bool
config.set('content.javascript.enabled', True, 'qute://*/*')

# Enable WebGL.
# Type: Bool
c.content.webgl = True

# Editor (and arguments) to use for the `open-editor` command. The
# following placeholders are defined: * `{file}`: Filename of the file
# to be edited. * `{line}`: Line in which the caret is found in the
# text. * `{column}`: Column in which the caret is found in the text. *
# `{line0}`: Same as `{line}`, but starting from index 0. * `{column0}`:
# Same as `{column}`, but starting from index 0.
# Type: ShellCommand
c.editor.command = ['subl', '{file}']

# Position of the tab bar.
# Type: Position
# Valid values:
#   - top
#   - bottom
#   - left
#   - right
c.tabs.position = 'left'

# Background color for webpages if unset (or empty to use the theme's
# color).
# Type: QtColor
c.colors.webpage.bg = 'white'

# Default monospace fonts. Whenever "monospace" is used in a font
# setting, it's replaced with the fonts listed here.
# Type: Font
c.fonts.monospace = 'Luculent'

# Font used in the completion widget.
# Type: Font
c.fonts.completion.entry = '10pt Luculent'

# Font used in the completion categories.
# Type: Font
c.fonts.completion.category = 'bold 10pt Luculent'

# Font used for the debugging console.
# Type: QtFont
c.fonts.debug_console = '10pt Luculent'

# Font used for the downloadbar.
# Type: Font
c.fonts.downloads = '10pt Luculent'

# Font used for the hints.
# Type: Font
c.fonts.hints = 'bold 10pt Luculent'

# Font used in the keyhint widget.
# Type: Font
c.fonts.keyhint = '10pt Luculent'

# Font used for error messages.
# Type: Font
c.fonts.messages.error = '10pt Luculent'

# Font used for info messages.
# Type: Font
c.fonts.messages.info = '10pt Luculent'

# Font used for warning messages.
# Type: Font
c.fonts.messages.warning = '10pt Luculent'

# Font used for prompts.
# Type: Font
c.fonts.prompts = '10pt Luculent'

# Font used in the statusbar.
# Type: Font
c.fonts.statusbar = '10pt Luculent'

# Font used in the tab bar.
# Type: QtFont
c.fonts.tabs = '10pt Luculent'

# Font family for standard fonts.
# Type: FontFamily
c.fonts.web.family.standard = 'Luculent'

# Font family for fixed fonts.
# Type: FontFamily
c.fonts.web.family.fixed = 'Luculent'

# Font family for serif fonts.
# Type: FontFamily
c.fonts.web.family.serif = 'Luculent'

# Font family for sans-serif fonts.
# Type: FontFamily
c.fonts.web.family.sans_serif = 'Luculent'

# Font family for cursive fonts.
# Type: FontFamily
c.fonts.web.family.cursive = 'Luculent'

# Font family for fantasy fonts.
# Type: FontFamily
c.fonts.web.family.fantasy = 'Luculent'

# Default font size (in pixels) for regular text.
# Type: Int
c.fonts.web.size.default = 14

# Default font size (in pixels) for fixed-pitch text.
# Type: Int
c.fonts.web.size.default_fixed = 10

# Hard minimum font size (in pixels).
# Type: Int
c.fonts.web.size.minimum = 10

# Minimum logical font size (in pixels) that is applied when zooming
# out.
# Type: Int
c.fonts.web.size.minimum_logical = 10

# This setting can be used to map keys to other keys. When the key used
# as dictionary-key is pressed, the binding for the key used as
# dictionary-value is invoked instead. This is useful for global
# remappings of keys, for example to map Ctrl-[ to Escape. Note that
# when a key is bound (via `bindings.default` or `bindings.commands`),
# the mapping is ignored.
# Type: Dict
c.bindings.key_mappings = {'<Ctrl+6>': '<Ctrl+^>', '<Ctrl+Enter>': '<Ctrl+Return>', '<Ctrl+j>': '<Return>', '<Ctrl+m>': '<Return>', '<Ctrl+[>': '<Escape>', '<Enter>': '<Return>', '<Shift+Enter>': '<Return>', '<Shift+Return>': '<Return>'}

# Bindings for normal mode
config.bind(',v', 'spawn --detach mpv {url}')
